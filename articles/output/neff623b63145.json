{
  "title": "#Webスクレイピング #GAS #最低賃金API が動いていないので作り直す",
  "link": "https://note.com/nomuragoro/n/neff623b63145",
  "pub_date": "Wed, 12 Aug 2020 20:15:03 +0900",
  "creator": "中 翔（のむらごろう）| IT教育の効果的な受講方法の案内人",
  "guid": "neff623b63145",
  "description": null,
  "post_id": 42,
  "content": "<h2 name=\"p2END\"># 前の記事</h2><p name=\"bdace64c-fe82-4804-9b81-0fb492b9a069\"><a href=\"https://note.com/nomuragoro/n/n0e41281de8eb\">https://note.com/nomuragoro/n/n0e41281de8eb</a></p><p name=\"FjkIs\">この記事は人月シミュレーターで使っている最低賃金APIの作り方です。</p><p name=\"sgLTA\">せっかく時給が出るので、最低賃金以上かどうかを判定する仕組みを作ろうと思いました。<br>今回採用しようと思ったのはこちら。</p><p name=\"0ba5d37a-8da7-4a01-931d-a5c5d2216264\"><a href=\"https://takaya1992.hatenablog.jp/entry/2017/04/06/022344\">https://takaya1992.hatenablog.jp/entry/2017/04/06/022344</a></p><h2 name=\"t9IOV\"># こんなに頑張ることはなかった</h2><p name=\"HkrmB\">まずはじめに言いますが、ビジネス的には一年に一回ぐらいの更新なので、サイトに行って以下を手打ちするのがベストです。<br>利用頻度の低いものや、実装難度の高いもの、例外などをシステム化するのはビジネス的にはナンセンスです。</p><pre name=\"vB0uM\"><code>const minimum_wage = {\n  ...https://www.mhlw.go.jp/stf/seisakunitsuite/bunya/koyou_roudou/roudoukijun/minimumichiran/\n}</code></pre><p name=\"YjYcD\">では、本題です。</p><h2 name=\"mTUPt\"># データを登録する</h2><p name=\"l0RGP\">最新の手法で対応しました。</p><p name=\"d52ffae0-e493-4d2d-ac40-4478abce5ef2\"><a href=\"https://note.com/nomuragoro/n/n071a435123ad\">https://note.com/nomuragoro/n/n071a435123ad</a></p><p name=\"462oq\">こちらには古い手順を残しています。</p><h2 name=\"0Ldvp\">## データを公開しているサイトをスクレイピングする</h2><p name=\"wmmfs\">とりあえずサクッとやっちゃいましょう。<br><a href=\"https://github.com/shimajima-eiji/Hosting/blob/GAS-minimum_wage/set.gs\" target=\"_blank\" rel=\"nofollow\">Github</a>にソースを全文公開していますので、そちらを参照してください。</p><pre name=\"4BHfs\"><code>function __scraping ()\n{\n  var html = UrlFetchApp.fetch( PROPERTIES.url ).getContentText( 'UTF-8' ).replace( /\\r?\\n/g, \"\" ).replace( /[０-９]/g, function ( word )\n  {\n    return String.fromCharCode( word.charCodeAt( 0 ) - 0xFEE0 )\n  } );\n  var start = \"&lt;tbody&gt;\";\n  var end = \"&lt;/tbody&gt;\";\n  return __cut( html, start, end );\n}</code></pre><p name=\"Hw28K\">スクレイピングをしている部分はこれだけです。<br>必要なのは`UrlFetchApp.fetch( PROPERTIES.url )`だけです。<br>スクレイピング処理はデータを拾ってきた後の方が重要で、データクレンジングが恐ろしく大変です。<br>replaceで置き換えたりパターンマッチで拾ってきたり、おっそろしく泥臭い事をやる必要があります。</p><p name=\"c757o\">スクレイピングのコツは、データ加工をどれだけ楽にやるかに尽きます。<br>本スクリプトでも、結構コネコネして100行ぐらいに圧縮しています。<br>これ以上圧縮すると、回収時に白目になりそうなのでこれ以上のリファクタリングはしません。</p><h2 name=\"VAu4d\">### テストデータについて</h2><p name=\"J4ro9\">デバッグのたびにスクレイピングをしていると申し訳ないので、スクレイピング部分が出来たらデータを自分で作ってそちらに切り替えましょう。<br>スクレイピングはブラウザでのアクセスと変わらない事をやっているので、デバッグのたびに実行されると、いわゆるF5アタックをやっている事になります。</p><h2 name=\"wsOKw\">## 加工したデータはスプレッドシートへ</h2><p name=\"kRG8Q\">最低賃金は頻繁に更新されるわけではないので、呼び出されるたびにスクレイピングの必要があるわけではないと判断していったんスプレッドシートに格納します。<br>そもそも最低賃金にリアルタイム性が必要なシーンがどんな状況か想像できないですが^^;</p><pre name=\"BJnKC\"><code>const sheet = SpreadsheetApp.getActiveSheet().getRange( 1, 1, data.length, data[ 0 ].length );\nsheet.setValues( data );</code></pre><p name=\"E2DLX\">データをちまちま登録するより、getRangeで配列の行列を取ってsetValuesで一括登録したほうが早いです。<br>getRangeで格納したい場所にforで回して一つ一つ入れていく方法もありますが、この方法だと5分の壁にぶつかる可能性があります。</p><p name=\"n9l5Z\">なお、dataは二次配列で格納します。<br>ヘッダーはないので、必要であれば自分で設定しましょう。</p><pre name=\"XIt1X\"><code>  data.unshift( [ PROPERTIES.code, PROPERTIES.name, PROPERTIES.wage, PROPERTIES.date ] );</code></pre><h2 name=\"3fBdf\"># データを提供する</h2><h2 name=\"6TlUC\">## スプレッドシートからデータを取得する</h2><p name=\"qpGlh\">APIコールされたらスプレッドシートに登録した内容を返すようにします</p><pre name=\"U6HZQ\"><code>const sheet = SpreadsheetApp.getActiveSheet();\nvar alldata = sheet.getRange(1, 1, sheet.getLastRow(), sheet.getLastColumn()).getValues();</code></pre><p name=\"CochY\">データが入っているセルをgetRangeで指定してgetValuesで拾ってきます。<br>getValueで一つずつ拾ってくるより、いったん全部持ってきて配列処理の方が早いです。<br>GASは5分の壁がありますので、負荷が掛かる処理はなるべくやらないのが正道です。</p><h2 name=\"1iV5B\">## json形式に加工する</h2><p name=\"dIqO8\">利便性という意味ではgetValuesの値をそのままreturnしてしまった方がいいです。<br>が、ちゃんとAPIとして使えるようにjsonを作りましょう。<br>なお、日付部分は日付型として処理されるので、フォーマットを適切に設定する必要があります。</p><h2 name=\"oprs8\">## 値を返す</h2><p name=\"02jiS\">この記事を書こうと思った発端ですが、GASの場合色々と設定が難しすぎて解説するとテーマが行方不明になったので別記事で詳細を掘り下げます。</p><p name=\"0fb8235d-bd39-47fb-a2f4-52829ecce792\"><a href=\"https://note.com/nomuragoro/n/nbb5c4b92d2f6\">https://note.com/nomuragoro/n/nbb5c4b92d2f6</a></p><h2 name=\"Loq77\"># GASでスクレイピング・データを公開を駆け足で解説しました。</h2><p name=\"tEW5U\">ので、ちょっと説明不足かなぁ、と思うところはありますが恐らく実装するという観点では解決できるかと思います。<br>この記事でうまく行かなかったらコメントを下さい。めっちゃ対応します。</p><p name=\"PvRjo\">この記事でうまく行った方、❤スキを押してくれると大喜びします。</p><h2 name=\"JlVmW\"># 戻る</h2><p name=\"59a416fd-4596-4c1f-b279-cdfdae5dbac5\"><a href=\"https://note.com/nomuragoro/n/nf11cbbaf8f96\">https://note.com/nomuragoro/n/nf11cbbaf8f96</a></p><p name=\"Ul0AJ\"><br></p><p name=\"jONXa\"><br></p>",
  "post_date": "2020-08-12 20:15:03",
  "status": "publish",
  "source": "xml"
}