{
  "title": "テストコードを減らすためのリファクタリングテクニック",
  "link": "https://note.com/nomuragoro/n/nd7a107a495d3",
  "pub_date": "Mon, 20 Jul 2020 17:29:03 +0900",
  "creator": "中 翔（のむらごろう）| IT教育の効果的な受講方法の案内人",
  "guid": "nd7a107a495d3",
  "description": null,
  "post_id": 16,
  "content": "<figure name=\"a9b78577-7d2d-4fde-a47a-f6003653ff4a\"><img src=\"/assets/nd7a107a495d3_268feded086b8b69505fb8c88044fd3e.png\"><figcaption></figcaption></figure><p name=\"veGvP\">ようやく本題です。<br>今日はこの話をしたいがためにサンプルコードの記事を書いていたのですが、色々やっていくうちに気付きがあったので、別記事で色々と書き足す事にしました。</p><h2 name=\"d1A0O\"># 謝辞</h2><p name=\"JY0ji\">書き終えて気付いたんですが、言ってる内容がほとんどこれでした。</p><p name=\"5bb17283-9ce0-4eff-b8b9-96d0f50c2260\"><a href=\"https://amzn.to/3jvSL0S\">https://amzn.to/3jvSL0S</a></p><h2 name=\"9AnxV\"># サンプルコード</h2><p name=\"885fbec0-db4c-4630-aae2-c47ef5288c55\"><a href=\"https://note.com/nomuragoro/n/nc4374b8b4fc1\">https://note.com/nomuragoro/n/nc4374b8b4fc1</a></p><p name=\"uaGqZ\">このうち、</p><h2 name=\"3SM7i\">## リファクタリング前</h2><p name=\"0b265c79-e5af-4542-8077-6bbb5983d476\"><a href=\"https://gist.github.com/shimajima-eiji/a3077686179f1c298e6cc1d4845554bf#file-script-js\">https://gist.github.com/shimajima-eiji/a3077686179f1c298e6cc1d4845554bf#file-script-js</a></p><h2 name=\"gBd1w\">## リファクタリング後</h2><p name=\"156373f7-db39-4d50-8094-7e30cdcce096\"><a href=\"https://gist.github.com/shimajima-eiji/a3077686179f1c298e6cc1d4845554bf#file-refactoring-js\">https://gist.github.com/shimajima-eiji/a3077686179f1c298e6cc1d4845554bf#file-refactoring-js</a></p><p name=\"AAdYh\">を取り上げます。<br>どちらも、不正な値が入力された時以外は同じ動作をするコードです。</p><h2 name=\"cZqFi\"># リファクタリングとは？</h2><p name=\"vCIHC\">概要はWikiにぶん投げます。</p><p name=\"f4526577-8255-424e-ae1f-e9a14bc612b6\"><a href=\"https://ja.wikipedia.org/wiki/%E3%83%AA%E3%83%95%E3%82%A1%E3%82%AF%E3%82%BF%E3%83%AA%E3%83%B3%E3%82%B0_(%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0)\">https://ja.wikipedia.org/wiki/%E3%83%AA%E3%83%95%E3%82%A1%E3%82%AF%E3%82%BF%E3%83%AA%E3%83%B3%E3%82%B0_(%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0)</a></p><p name=\"Yml8Z\">私の解釈で恐縮ですが、ざっくり解説すると仕様変更（大体の場合、要件定義で発見されなかった隠れ仕様や、開発期間中の法改正などにより変更を余儀なくされたもの）に振り回される事が多いシステム開発において、最新の状態で最適化することを指します。<br>が、ここで取り上げるのは、<b>テストコードを減らすため</b>のリファクタリングです。</p><h2 name=\"7bgc7\"># なぜテストをするのか？</h2><p name=\"tWoax\">これも概要は外部にお任せします。</p><p name=\"61d60c0b-f461-4418-bcb3-2aaa9534d8a4\"><a href=\"https://qiita.com/taumax/items/b70e29ef525b2e561568\">https://qiita.com/taumax/items/b70e29ef525b2e561568</a></p><p name=\"kTWay\">※本記事は2019年8月18日時点で作成されたものなので、プログラミングに関係ない記事でもセーフなのか運営のお目溢しの可能性がありますので、将来的にリンク切れになる可能性があります。</p><p name=\"cCSWV\">こういった問題を解消するためにテストを行うのですが、品質評価を行う側ではなく、開発者として単純に「無意味なテスト項目を減らすため」と解釈します。<br>（この記事では、品質評価を実施する上で、この考え方の善悪について議論はしません）</p><h2 name=\"sTLbN\"># 本論：開発者のテスト（単体テスト）</h2><p name=\"FjiIo\">単純にkeydownという関数をテストしたい場合を考えます。<br>keydown関数は、受け取ったキーが何かを表示させる関数です。<br>keydownで対応するキーを押すと、対応する文字列を返します。<br>たとえば、カーソルキーの↑キーを押したら、画面に↑を出力できることが期待値です。<br>今回は、カーソルキー「↑」「↓」「←」「→」を対応する事になりました。</p><h2 name=\"NFaML\">また、<b>不正な値を入力された時は気にしない</b>事にします。<br>（※実際の開発現場において、仕様書に書いてない場合があった時はシステム設計者に問い合わせましょう）<br><br>## リファクタリング前</h2><p name=\"rO40D\">if文（条件分岐）が5通りあるので、単体テストも最低6ケース作る必要があります。<br>雑にまとめると、</p><p name=\"KhgUG\">- 入力がされ、何かを出力されること（機能テスト）<br>- ↑キーを押すと、↑が出力されること（仕様テスト）<br>- ↓キーを押すと、↓が出力されること（仕様テスト）<br>- ←キーを押すと、←が出力されること（仕様テスト）<br>- →キーを押すと、→が出力されること（仕様テスト）<br>- それ以外のキーを押す（異常系テスト）<br></p><p name=\"T6j0W\">となります。</p><p name=\"XmhZf\">ここでいう機能テストとは最低限の動作を確認することで、仕様テストは要求された仕様を満たすためのテストです。<br>異常系テストとは、ざっくり正常系ではない場合のテストです。ここでは入力の値が仕様書にないものとしました。<br></p><h2 name=\"G4cxj\">## リファクタリング後</h2><p name=\"DWk7Q\">関数をテストするだけならもっと簡単にできます。</p><p name=\"R0y6B\">- 入力がされ、何かを出力できること（機能テスト）<br>- cursorに該当するキーを押す（仕様テスト）<br>- cursorに該当しないキーを押す（異常系テスト）</p><p name=\"ClM9H\">厳密に行うならリファクタリング前と同じテストを行いますが、条件分岐がないので関数の単体テストとしてはこれだけで完了できます。</p><h2 name=\"XlVXz\">## リファクタリングで何が嬉しいか（テスト以外）</h2><p name=\"h6n3I\">機能改修を求められた時のメンテナンス性の向上が最も分かりやすいです。<br>システムの全貌を知らなくても、関数の振る舞いが分かっていれば、そこだけ直せば機能改修が容易になります。<br>関数の作成者以外にも、使い方が分かる人なら誰でも作り直す事もできます。</p><p name=\"rYYZc\">例えば、もしプロジェクトで少しずつリファクタリングを進めている場合は、古い関数と新しい関数が同時に存在しているはずなので、古い関数を使っている場所に気付きを与えたり、書き換える前と後の違いをドキュメントに興しておきましょう。</p><p name=\"uik4X\">というのも、手が回らなくなった時に、リファクタリングをしていた・していない判別が出来なくなる上、イレギュラーケースが起こった時の運用ルールが分かりにくくなるからです。<br>場合によっては、リファクタリングをしていた担当者が転属などにより、誰にもメンテナンスされないコードが出てきてしまいかねません。</p><h2 name=\"FoKVb\">## リファクタリングで何が嬉しいか（プロジェクト以外）</h2><p name=\"kDlya\">主に個人を想定していますが、<b>リファクタリングは積極的に行っていくべき</b>です。<br>他の人が書いたコードや、昔の自分が書いたコードを見直すとおかしいポイントや、勉強になる書き方などが見えてきます。<br>実際に写経してみて、「これよりもっと良い書き方があるはず」と思って調べてみましょう。<br>思いもよらなかった方法、もっとイケてる書き方が見つかります。</p><h2 name=\"hZ8mv\">## 安易にリファクタリングをしてはいけないケース</h2><p name=\"vAeOq\"><b>既にkeydownがどこかで使われて</b>いて、出力先のOUTPUT_IDが複数あるケースです。今回は単一のIDを共通して使うので、keydown関数内で決め打ちしていますが、これを引数を取るケースなどが考えられます。<br>これは「リファクタリングをしてはいけない」というよりは「初期段階から一つの関数に煩雑な処理をさせてはいけない」と言い換える事もできます。<br>が、もうやってしまったものは仕方がないので、いったんTODOリストかタスクボードで周知し、プロジェクト全体で負の遺産を取り除こうという流れになった時に行うべきです。</p><p name=\"PiEV9\">今回はJavaScriptなので、keydownの引数を一つ増やせば解決できます。そして、この仕組みを知っている人はよくやりがちです。<br>ただし、どこかでウッカリkeydown(\"引数\")とやろうものなら、想定した結果が返ってこない事になります。<br>（本来なら一緒に直すべき点ですが、だいたい気付かれないです）</p><h2 name=\"YVr6R\"># コラム：開発者が考えるべきテスト</h2><p name=\"x54y4\">実行しなくても意味がわかるようにプログラムを見直す事が重要です。<br>今回は小さな関数なので、リファクタリング前の状態でも混乱しないですが、これが多段（多層）構成になってきたり、単純に行数が増えると見にくくなってきます。</p><p name=\"r5YVZ\">よくあるのが、</p><p name=\"Bwcx6\">- 入力された値がnullなのかundefinedなのか0なのか（どれもif文ではfalseとして扱われるもの）<br>- 値の正しさ（今回の場合、テンキーの「8」「2」「4」「6」、FPSゲームでいう「W」「S」「A」「D」は同じか）<br>- データの加工が必要か<br>&nbsp; - データの加工はkeydown関数で行うべきではないが、誰かがやらなければならない必要な作業である場合</p><p name=\"ETweU\">に、どう対処すべきか悩む事があります。</p><p name=\"1aDlz\">## 実話</p><p name=\"Vwttx\">とあるプロダクトの運用保守において、頻繁にエラーを吐く600行近い関数がありました。<br>ななめ読みをしていると、文字列を整形したり補完したり、出力先を管理したりと結構重い責任を持っていたのです。<br>一行ずつ手続き型で書いてくれていれば頑張って読む気になりますが、役割を勘違いした子クラスがひしめき、何のためにライブラリを使っているか分からず、もう誰もメンテが出来なくなってしまった巨大クラスをリバースエンジニアリングしてマイクロモジュールに作り直した事があります。<br>結果、どこにバグがあったのか突き止めることはできましたが、一つの関数を作り直すのに二週間も掛けたという苦い経験があります。</p><p name=\"S4WRD\">プログラムを書く時は、コメントの必要がないほど分かりやすいものがベストですが、自分が読みやすいコメントや書き方になってしまっている可能性を除外しています。<br>プロダクトで使うソースコードなら自分が読みやすいと思っても、敢えてコメントを残してくれれば多少は読みやすくなったし、クラスの役割や理由をドキュメントに興してくれれば後任の方が保守する気になります。</p><p name=\"b2050b8a-4c32-4124-bd88-062da43080fc\"><a href=\"https://amzn.to/30wJxc5\">https://amzn.to/30wJxc5</a></p><p name=\"luRGN\">読んだことがない人はもう居ないと思いますが、念のためにいつもの貼っときます。</p>",
  "post_date": "2020-07-20 17:29:03",
  "status": "publish",
  "source": "xml"
}