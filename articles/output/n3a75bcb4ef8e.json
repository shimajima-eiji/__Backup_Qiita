{
  "title": "microCMSを無料枠で効率的に使うために、サービスをいかに削れるか考える。",
  "link": "https://note.com/nomuragoro/n/n3a75bcb4ef8e",
  "pub_date": "Wed, 15 Jul 2020 14:32:43 +0900",
  "creator": "中 翔（のむらごろう）| IT教育の効果的な受講方法の案内人",
  "guid": "n3a75bcb4ef8e",
  "description": null,
  "post_id": 2,
  "content": "<figure name=\"453a771a-b356-4af4-9b92-e4bddb14a849\"><img src=\"/assets/n3a75bcb4ef8e_195b778209b3ce0218fedb61853ee3f9.png\"><figcaption></figcaption></figure><p name=\"n88rJ\">※運用の話が強めです。<br>Qiitaに公開しようかと思ったんですが、一般公開するとすぐに規制対象になりそうなので有料です。</p><p name=\"Iox3d\">私は、ブログのコンテンツも、複数のブログで使い回すサイトガチェットも、インターフェースとしてのGASも色々と使っており、データ管理を一元化したいなと思っていました。<br>今まではスプレッドシートをデータベースのように使っていたのですが、システム用に作ったファイルと要件定義など業務で作っているドキュメントとしてのファイルが混在しており、非常に管理が煩雑になっていました。<br>ディレクトリで分けたりファイル名で工夫したり、と思いつく事を色々やったんですが、そもそも単一ファイルとしてスプレッドシートで巨大なコンテンツを扱うのが難しい（やってやれないことはないですが、ブログの記事をスプレッドシートに書いてGitで管理する場合などは非常に手間）ので、これを解消する方法です。</p><h2 name=\"4vohO\">何が嬉しいの？</h2><p name=\"lGofM\">・microCMSの無料プランだとサービスの利用数に制限がある。これを擬似的に解決できる。<br>・各サービスの一部に変更があった場合でもすべてのアプリに変更を適用できる（DBっぽい使い方ができる）</p><p name=\"m1chS\">後者はスプレッドシートでもできるので、ここで取り上げたいのは前者です。</p><h2 name=\"KyrhR\">有料設定にあたって</h2><p name=\"6JEIJ\"><a href=\"https://microcms.io/pricing/\" target=\"_blank\" rel=\"nofollow\">microCMSの公式：料金設定（https://microcms.io/pricing/）</a>に従いました。<br>ただし、月々ではなく買い切りの料金です。<br>本記事でやろうとしていることは、FreeプランでAPI制限が10個しかないので少ないと感じた人にとって価値がある内容です。<br>具体的には開発者やブロガーの方を対象としています。</p><p name=\"sAJZx\">これだけの内容で高い料金を払うのも嫌だと思うので、本記事を読んで個人でも実質無制限のAPI数を導入をしてみようと思った方への導入サポートも含むことにしました。</p><p name=\"LENVx\">なお、記事中にも書いていますが、あくまで個人用ですので、<b>商用ラインに乗せるものはリスクマネジメントの観点から、</b><b>この方法で対応しないでください。</b></p><h2 name=\"yCZfS\">記事内で使用している画像</h2><p name=\"Ryzc7\">これだけでピンと来たら自分でできます。頑張ってください。</p><p name=\"U0kBC\"><img src=\"/assets/n3a75bcb4ef8e_picture_pc_9cb1e93103bd56e9b518c37bfee1e691.png\" alt=\"許可設定\" width=\"620\" height=\"210\"></p><p name=\"IMrJ6\"><img src=\"/assets/n3a75bcb4ef8e_picture_pc_b673c61545bc83f675fe6eb53545e8cd.png\" alt=\"コンテンツ\" width=\"620\" height=\"228\"></p><h2 name=\"eTuoO\">解説：microCMSの設定</h2><p name=\"CoUZI\">全体としては、このように管理しています。</p><p name=\"4aLqF\"><img src=\"/assets/n3a75bcb4ef8e_picture_pc_aceb38ccc4b3b169d05841d99d42257e.png\" alt=\"許可設定\" width=\"620\" height=\"210\"></p><p name=\"aTEfr\">コンテンツに着目していきましょう。<br></p><h2 name=\"v4t20\">○○の許可設定</h2><p name=\"gsUfM\">この内容でスキーマを作成します。</p><pre name=\"wtxPC\"><code>\nschema.json\n\n[\n {\n   \"fieldId\": \"value\",\n   \"name\": \"値\",\n   \"kind\": \"text\",\n   \"description\": \"許可するコンテンツAPI名を設定する。【要変更】作成したcontentIdはkeyとして使用する\",\n   \"required\": true\n }\n]</code></pre><p name=\"Gi3jx\">一つしか項目がないのでとてもシンプルです。<br>ここで作成する値は、同じサービス内のコンテンツAPI名です。​</p><p name=\"GSVRL\">たとえば、「お絵かきLINEBOTの許可設定」の場合はlineのコンテンツAPIだけを使わせたいので、値にはlineだけとします。<br>「slack-line連携の許可設定」の場合は、lineとslackのコンテンツAPIを使わせたいので、値にはlineとslackを登録します。</p><p name=\"hQRjT\"><img src=\"/assets/n3a75bcb4ef8e_picture_pc_6e44735314d3564f7574ac4b403275a8.png\" alt=\"コンテンツ\" width=\"620\" height=\"228\"></p><p name=\"S0r53\">各コンテンツAPIはこのようになっています。<br></p><p name=\"soFSf\">先程のスキーマを使いまわしていますが、解説用に「メモ」を追加しました。​</p><p name=\"c3b7507a-17b8-409d-b498-499c8169f9a3\"><a href=\"https://gist.github.com/shimajima-eiji/c10e586f1257fa3981032ce8d9af7084#file-microcms-gs\">https://gist.github.com/shimajima-eiji/c10e586f1257fa3981032ce8d9af7084#file-microcms-gs</a></p><p name=\"ZQgbj\">全体のスクリプトとしてはこうなります。<br>microCMS.gsで設定するPERMISSION_CONTENTIDはそれぞれの許可設定で指定したものです。<br><b>これを間違えると大変な事になります。</b></p><p name=\"klaL6\">解説はコメントの通りですが、`findValue_array`は`...contents.filter((object)=&gt;object.id==target)`です。<br>私はまだGASのV8ランタイムを採用していないので泥臭い事をやっています…</p><h2 name=\"Dn98q\">問題点</h2><p name=\"ya5Tc\">その他のサービスアプリで使用するAPIキーが共通なので、一つが漏洩すれば関係するサービスすべてが漏洩した事になるため、リスク管理の観点からはおすすめしません。<br>私はあくまで開発を楽しみたい個人で活用しているので<br>商用ラインで使っている場合はきちんとサービスを分けましょう。<br><br></p>",
  "post_date": "2020-07-15 14:32:43",
  "status": "publish"
}